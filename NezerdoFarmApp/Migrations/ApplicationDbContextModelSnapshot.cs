// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NezerdoFarmApp;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NezerdoFarmApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.EggProduction", b =>
                {
                    b.Property<int>("EggProductionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EggProductionId"));

                    b.Property<DateTime>("DateofProduction")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LivestockId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("EggProductionId");

                    b.HasIndex("LivestockId")
                        .IsUnique();

                    b.ToTable("EggProductions");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.Expense", b =>
                {
                    b.Property<Guid>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FeedId")
                        .HasColumnType("integer");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LivestockId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("ExpenseId");

                    b.HasIndex("FeedId")
                        .IsUnique();

                    b.HasIndex("LivestockId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.Farm", b =>
                {
                    b.Property<Guid>("FarmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FarmLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FarmName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FarmOwner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FarmSize")
                        .HasColumnType("text");

                    b.HasKey("FarmId");

                    b.ToTable("Farms");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.FarmRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("FarmRoles");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.FarmRolePermission", b =>
                {
                    b.Property<int>("FarmRoleId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.HasKey("FarmRoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("FarmRolePermissions");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.FarmUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid");

                    b.Property<int>("FarmRoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "FarmId", "FarmRoleId");

                    b.HasIndex("FarmId");

                    b.HasIndex("FarmRoleId");

                    b.ToTable("FarmUserRole");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.Feed", b =>
                {
                    b.Property<int>("FeedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FeedId"));

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid");

                    b.Property<string>("FeedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("FeedId");

                    b.HasIndex("FarmId");

                    b.ToTable("Feeds");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.FeedConsumption", b =>
                {
                    b.Property<int>("FeedConsumptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FeedConsumptionId"));

                    b.Property<DateTime>("ConsumptionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FeedId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.HasKey("FeedConsumptionId");

                    b.HasIndex("FeedId");

                    b.ToTable("FeedConsumptions");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.HealthRecord", b =>
                {
                    b.Property<int>("HealthRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HealthRecordId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LivestockId")
                        .HasColumnType("integer");

                    b.Property<string>("NameOfDrug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TypeofDrug")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("HealthRecordId");

                    b.HasIndex("LivestockId");

                    b.ToTable("HealthRecords");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.Livestock", b =>
                {
                    b.Property<int>("LivestockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LivestockId"));

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Breed")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid");

                    b.Property<string>("LiveStockType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfAnimals")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LivestockId");

                    b.HasIndex("FarmId");

                    b.ToTable("Livestocks");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PermissionId"));

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<int>("ResourceId")
                        .HasColumnType("integer");

                    b.HasKey("PermissionId");

                    b.HasIndex("ResourceId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.Resource", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResourceId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ResourceId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.Sale", b =>
                {
                    b.Property<Guid>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SalesDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("numeric");

                    b.HasKey("SaleId");

                    b.HasIndex("FarmId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("FarmId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NezerdoFarmApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NezerdoFarmApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NezerdoFarmApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NezerdoFarmApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.EggProduction", b =>
                {
                    b.HasOne("NezerdoFarmApp.Models.Livestock", "Livestock")
                        .WithOne("EggProduction")
                        .HasForeignKey("NezerdoFarmApp.Models.EggProduction", "LivestockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Livestock");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.Expense", b =>
                {
                    b.HasOne("NezerdoFarmApp.Models.Feed", "Feed")
                        .WithOne("Expenses")
                        .HasForeignKey("NezerdoFarmApp.Models.Expense", "FeedId");

                    b.HasOne("NezerdoFarmApp.Models.Livestock", "Livestock")
                        .WithMany()
                        .HasForeignKey("LivestockId");

                    b.Navigation("Feed");

                    b.Navigation("Livestock");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.FarmRole", b =>
                {
                    b.HasOne("NezerdoFarmApp.Models.Farm", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.FarmRolePermission", b =>
                {
                    b.HasOne("NezerdoFarmApp.Models.FarmRole", "FarmRole")
                        .WithMany("RolePermissions")
                        .HasForeignKey("FarmRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NezerdoFarmApp.Models.Permission", "Permission")
                        .WithMany("FarmRolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FarmRole");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.FarmUserRole", b =>
                {
                    b.HasOne("NezerdoFarmApp.Models.Farm", "Farm")
                        .WithMany("FarmUserRoles")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NezerdoFarmApp.Models.FarmRole", "FarmRole")
                        .WithMany("FarmUserRoles")
                        .HasForeignKey("FarmRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NezerdoFarmApp.Models.User", "User")
                        .WithMany("FarmUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");

                    b.Navigation("FarmRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.Feed", b =>
                {
                    b.HasOne("NezerdoFarmApp.Models.Farm", "Farm")
                        .WithMany("Feeds")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.FeedConsumption", b =>
                {
                    b.HasOne("NezerdoFarmApp.Models.Feed", "Feed")
                        .WithMany("FeedConsumptions")
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feed");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.HealthRecord", b =>
                {
                    b.HasOne("NezerdoFarmApp.Models.Livestock", "Livestock")
                        .WithMany("HealthRecords")
                        .HasForeignKey("LivestockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Livestock");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.Livestock", b =>
                {
                    b.HasOne("NezerdoFarmApp.Models.Farm", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.Permission", b =>
                {
                    b.HasOne("NezerdoFarmApp.Models.Resource", "Resources")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.Sale", b =>
                {
                    b.HasOne("NezerdoFarmApp.Models.Farm", "Farm")
                        .WithMany("Sales")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.User", b =>
                {
                    b.HasOne("NezerdoFarmApp.Models.Farm", "Farm")
                        .WithMany("Users")
                        .HasForeignKey("FarmId");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.Farm", b =>
                {
                    b.Navigation("FarmUserRoles");

                    b.Navigation("Feeds");

                    b.Navigation("Sales");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.FarmRole", b =>
                {
                    b.Navigation("FarmUserRoles");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.Feed", b =>
                {
                    b.Navigation("Expenses")
                        .IsRequired();

                    b.Navigation("FeedConsumptions");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.Livestock", b =>
                {
                    b.Navigation("EggProduction");

                    b.Navigation("HealthRecords");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.Permission", b =>
                {
                    b.Navigation("FarmRolePermissions");
                });

            modelBuilder.Entity("NezerdoFarmApp.Models.User", b =>
                {
                    b.Navigation("FarmUserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
